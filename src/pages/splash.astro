---
// Component Imports

// Full Astro Component Syntax:
// https://docs.astro.build/core-concepts/astro-components/
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width' />
    <meta name='generator' content={Astro.generator} />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <script>
      //defining canvas element:
      const canvas = document.getElementById('canvas') as HTMLCanvasElement;
      const c = canvas.getContext('2d')!;

      // Get document size:
      var body = document.body,
        html = document.documentElement;

      var height = Math.max(
        body.scrollHeight,
        body.offsetHeight,
        html.clientHeight,
        html.scrollHeight,
        html.offsetHeight
      );
      var width = Math.max(
        body.scrollWidth,
        body.offsetWidth,
        html.clientWidth,
        html.scrollWidth,
        html.offsetWidth
      );

      //find ratio:
      const hr = height / width;

      //choose pixl count:
      const pixNum = 200000;

      //distribute pixels
      canvas.width = Math.sqrt(pixNum / hr);
      canvas.height = hr * canvas.width;

      //Random functions:
      function rand(n: number) {
        return Math.floor(Math.random() * (n - n / 2 + 1)) + n / 2;
      }

      const p = [];
      const permutation = [
        151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225,
        140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247,
        120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57,
        177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74,
        165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122,
        60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54,
        65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169,
        200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3,
        64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85,
        212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170,
        213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43,
        172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185,
        112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191,
        179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31,
        181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150,
        254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195,
        78, 66, 215, 61, 156, 180,
      ];

      for (let i = 0; i < 256; i++) {
        p[256 + i] = p[i] = permutation[i];
      }

      //Mouse event:
      let cursorX = 100;
      let cursorY = 100;
      let d = 0;
      const dmax = Math.min(canvas.width / 2, canvas.height / 2);

      var isMouseDown = false;
      document.onmousedown = function () {
        isMouseDown = true;
      };
      document.onmouseup = function () {
        isMouseDown = false;
      };
      canvas.addEventListener(
        'mousemove',
        function onMouseover(e) {
          const ratio = width / canvas.width;
          cursorX = Math.round(e.clientX / ratio);
          cursorY = Math.round(e.clientY / ratio);
        },
        0
      );

      function noise(x, y, z) {
        const X = Math.floor(x) & 255,
          Y = Math.floor(y) & 255,
          Z = Math.floor(z) & 255;
        x -= Math.floor(x);
        y -= Math.floor(y);
        z -= Math.floor(z);
        const u = fade(x),
          v = fade(y),
          w = fade(z);
        const A = p[X] + Y,
          AA = p[A] + Z,
          AB = p[A + 1] + Z,
          B = p[X + 1] + Y,
          BA = p[B] + Z,
          BB = p[B + 1] + Z;
        return lerp(
          w,
          lerp(
            v,
            lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),
            lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z))
          ),
          lerp(
            v,
            lerp(
              u,
              grad(p[AA + 1], x, y, z - 1),
              grad(p[BA + 1], x - 1, y, z - 1)
            ),
            lerp(
              u,
              grad(p[AB + 1], x, y - 1, z - 1),
              grad(p[BB + 1], x - 1, y - 1, z - 1)
            )
          )
        );
      }

      function fade(t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
      }

      function lerp(t, a, b) {
        return a + t * (b - a);
      }

      function grad(hash, x, y, z) {
        const h = hash & 15;
        const u = h < 8 ? x : y,
          v = h < 4 ? y : h == 12 || h == 14 ? x : z;
        return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
      }

      const pix = c.createImageData(canvas.width, canvas.height);

      //fill data:
      let inc = 0;
      for (var y = 0; y < canvas.height; y++) {
        for (var x = 0; x < canvas.width; x++) {
          pix.data[inc++] = 255;
          pix.data[inc++] = 255;
          pix.data[inc++] = 255;
          //Alpha:
          pix.data[inc++] = 255;
        }
      }

      const freq = 1 / 100;
      const voidThickness = 50;
      const distance = 70;
      const darkRings = 3;

      let z = 0;
      let i = 0;
      function loop() {
        setTimeout(function () {
          z += 0.005;
          i = 0;
          for (let y = 0; y < canvas.height; y++) {
            for (let x = 0; x < canvas.width; x++) {
              const val = parseInt(
                Math.abs(noise(x * freq, y * freq, z)) * 500
              );

              pix.data[i * 4 + 0]++;
              pix.data[i * 4 + 1]++;
              pix.data[i * 4 + 2]++;
              pix.data[i * 4 + 3] = 0;

              let brightness = 155;
              if (val % (distance * darkRings) < 10) {
                brightness = 300;
              }

              pix.data[i * 4 + 3] =
                brightness -
                Math.min(val % distance, distance - (val % distance)) *
                  voidThickness;

              //if cursor drag:
              const cX = x - cursorX;
              const cY = y - cursorY;
              if (cX * cX + cY * cY < (d * d) / 4) {
                pix.data[i * 4 + 0] = 120;
                pix.data[i * 4 + 1] = 0;
                pix.data[i * 4 + 2] = 255;
                pix.data[i * 4 + 3] = val;
              }

              i++;
            }
          }

          if (isMouseDown) {
            if (d < dmax) {
              d = d + (dmax - d) * 0.1;
            }
          } else {
            if (d > 0) {
              d = d - (dmax - d) * 0.1 - 3;
              if (d < 0) d = 0;
            }
          }

          c.putImageData(pix, 0, 0);
          window.requestAnimationFrame(loop);
        }, 10);
      }

      c.putImageData(pix, 0, 0);
      loop();
    </script>
  </head>
  <body>
    <main>
      <div class='bg-black h-full'>
        <canvas id='canvas' class='w-full overflow-hidden'></canvas>
      </div>
    </main>
  </body>
</html>
