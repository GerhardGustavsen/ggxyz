---
import '../layouts/main.scss';
import Stack from '../components/stack.astro';
import Link from '../components/links/web.astro';
const path = Astro.url.pathname;
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width' />
    <meta name='generator' content={Astro.generator} />
    <link rel='icon' type='image/svg+xml' href='/favicon.svg' />
    <script>
      //defining canvas element:
      const bg = document.getElementById('main') as HTMLElement;
      bg.style.background = 'black';

      const canvas = document.getElementById('canvas') as HTMLCanvasElement;
      const c = canvas.getContext('2d')!;

      //defining menu:
      const menu = document.getElementById('menu') as HTMLElement;

      // Get document size:
      const body = document.body,
        html = document.documentElement;

      const height = html.clientHeight;
      const width = Math.max(
        body.scrollWidth,
        body.offsetWidth,
        html.clientWidth,
        html.scrollWidth,
        html.offsetWidth
      );

      //distribute pixels
      canvas.width = width;
      canvas.height = height;
      canvas.style.width = ' ' + width + 'px';
      canvas.style.height = ' ' + height + 'px';

      //Random functions:
      function rand(n: number) {
        return Math.floor(Math.random() * (n - n / 2 + 1)) + n / 2;
      }

      //permutations:
      const p: number[] = [];

      for (let i = 0; i < 511; i++) {
        p[i] = Math.floor(Math.random() * 255);
      }

      //Mouse event:
      let cursorX = 100;
      let cursorY = 100;
      const dmax = Math.min(canvas.width / 4, canvas.height / 4);

      let isMouseDown = false;
      let isTouchDown = false;
      const mouseratio = width / canvas.width;

      document.addEventListener(
        'touchstart',
        function ontouchstart(e) {
          cursorX = Math.round(e.touches[0].clientX / mouseratio);
          cursorY = Math.round(e.touches[0].clientY / mouseratio);
          isTouchDown = true;
        },
        0
      );
      document.onmousedown = function () {
        isMouseDown = true;
      };
      document.ontouchend = function () {
        isTouchDown = false;
      };
      document.onmouseup = function () {
        isMouseDown = false;
      };
      document.addEventListener(
        'pointermove',
        function onMouseover(e) {
          cursorX = Math.round(e.clientX / mouseratio);
          cursorY = Math.round(e.clientY / mouseratio);
        },
        0
      );

      //perlin noise
      function noise(x, y, z) {
        const X = Math.floor(x) & 255,
          Y = Math.floor(y) & 255,
          Z = Math.floor(z) & 255;
        x -= Math.floor(x);
        y -= Math.floor(y);
        z -= Math.floor(z);
        const u = fade(x),
          v = fade(y),
          w = fade(z);
        const A = p[X] + Y,
          AA = p[A] + Z,
          AB = p[A + 1] + Z,
          B = p[X + 1] + Y,
          BA = p[B] + Z,
          BB = p[B + 1] + Z;
        return lerp(
          w,
          lerp(
            v,
            lerp(u, grad(p[AA], x, y, z), grad(p[BA], x - 1, y, z)),
            lerp(u, grad(p[AB], x, y - 1, z), grad(p[BB], x - 1, y - 1, z))
          ),
          lerp(
            v,
            lerp(
              u,
              grad(p[AA + 1], x, y, z - 1),
              grad(p[BA + 1], x - 1, y, z - 1)
            ),
            lerp(
              u,
              grad(p[AB + 1], x, y - 1, z - 1),
              grad(p[BB + 1], x - 1, y - 1, z - 1)
            )
          )
        );
      }

      function fade(t) {
        return t * t * t * (t * (t * 6 - 15) + 10);
      }

      function lerp(t, a, b) {
        return a + t * (b - a);
      }

      function grad(hash, x, y, z) {
        const h = hash & 15;
        const u = h < 8 ? x : y,
          v = h < 4 ? y : h == 12 || h == 14 ? x : z;
        return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
      }

      //canvas data:
      const pix = c.createImageData(canvas.width, canvas.height);

      //fill start data:
      let inc = 0;
      for (var y = 0; y < canvas.height; y++) {
        for (var x = 0; x < canvas.width; x++) {
          pix.data[inc++] = 255;
          pix.data[inc++] = 255;
          pix.data[inc++] = 255;
          //Alpha:
          pix.data[inc++] = 0;
        }
      }

      const freq = 1 / 100;
      const voidThickness = 40;
      let distance = 70;
      const darkRings = 3;

      let z = 1.743546;
      let cz = z;

      const trailfade = 30;
      const trail = 3;

      const d = 25000;

      y = 0;
      function loop() {
        if (isMouseDown || isTouchDown) {
          //if cursor down
          menu.style.backgroundColor = 'rgba(0,0,0,0.6)';
          let i = 0;
          for (var cy = 0; cy < canvas.height; cy++) {
            for (var cx = 0; cx < canvas.width; cx++) {
              const cX = cx - cursorX;
              const cY = cy - cursorY;

              const pitta = cX * cX + cY * cY;
              const center = 1 - pitta / d;
              let t = cz * center;
              if (y <= Math.abs(cy)) t = t - 0.1;
              if (pitta < d) {
                const val = Math.abs(noise(cx * freq, cy * freq, t + z)) * 500;
                let brightness = 155;

                if (val % (distance * darkRings) < 10) {
                  brightness = 255;
                }

                const stripeVal =
                  brightness -
                  Math.min(val % distance, distance - (val % distance)) *
                    voidThickness;

                pix.data[i * 4 + 3] = stripeVal;

                if (center > Math.random()) {
                  if (pix.data[i * 4 + 0] > 80)
                    pix.data[i * 4 + 0] = pix.data[i * 4 + 0] - 5;
                  pix.data[i * 4 + 1] = pix.data[i * 4 + 1] - 10;
                }
              }
              i++;
            }
          }
          cz += 0.03;
        } else {
          //normal behavior:
          menu.style.backgroundColor = '#222222';

          for (let x = 0; x < canvas.width; x++) {
            const val = Math.abs(noise(x * freq, y * freq, z)) * 500;

            let brightness = 155;

            if (val % (distance * darkRings) < 10) {
              brightness = 255;
            }

            const stripeVal =
              brightness -
              Math.min(val % distance, distance - (val % distance)) *
                voidThickness;

            pix.data[(x + y * canvas.width) * 4 + 3] = stripeVal;

            pix.data[(x + y * canvas.width) * 4 + 0] = 80;
            pix.data[(x + y * canvas.width) * 4 + 1] = 0;

            //trail fade:
            for (let i = trail; i < trailfade + trail; i++) {
              let newY = y - i;
              if (newY < 0) {
                newY += canvas.height;
              }

              pix.data[(x + newY * canvas.width) * 4 + 0] += 500 / trailfade;
              pix.data[(x + newY * canvas.width) * 4 + 1] += 256 / trailfade;
            }
          }
          y++;
          cz = 0;
          if (y > canvas.height) {
            z += 0.1;
            y = 0;
          }
        }
        c.putImageData(pix, 0, 0);
        setTimeout(() => loop(), 0);
      }

      loop();
    </script>
  </head>
  <body class='bg-bgLight patternDark'>
    <main id='main' class='bg-bgLight patternDark overflow-hidden'>
      <div
        id='menu'
        class='bg-bgDark transition-all duration-200 text-fgLight w-[40%] max-w-[13em] h-fit pt-3 left-0 right-0 top-0 bottom-0 m-auto overflow-hidden absolute'
      >
        <Stack path={path} />
        <div class='p-1 pl-4 mb-3'>
          <Link name='GitHub' url='github.com/GerhardGustavsen/ggxyz/' />
          <img class='mr-[1em] float-right' width='30px' src='/favicon.svg' />
        </div>
      </div><canvas id='canvas' class='overflow-hidden static'></canvas>
    </main>
  </body>
</html>
